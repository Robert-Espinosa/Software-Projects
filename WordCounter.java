
import components.map.Map;
import components.map.Map1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Put a short phrase describing the program here.
 *
 * @author Put your name here
 *
 */
public final class WordCounter {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private WordCounter() {
    }

    /**
     * Generates the set of characters in the given {@code String} into the
     * given {@code Set}.
     *
     * @param str
     *            the given {@code String}
     * @param charSet
     *            the {@code Set} to be replaced
     * @replaces charSet
     * @ensures charSet = entries(str)
     */
    public static void generateElements(String str, Set<Character> charSet) {
        assert str != null : "Violation of: str is not null";
        assert charSet != null : "Violation of: charSet is not null";

        // TODO - fill in body
        charSet.clear();
        for (int i = 0; i < str.length(); i++) {
            char z = str.charAt(i);
            if (!charSet.contains(z)) {
                charSet.add(z);
            }

        }

    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * @param out
     *            the output stream
     * @param name
     *            the name of the file
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(SimpleWriter out, String name) {
        out.println("<html>");
        out.println("<head>");
        out.println("<title>  Words Counted in data/" + name + ".txt </title>");
        out.println("</head>");
        out.println("<body>");
        out.print("<table>");

    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * @param out
     *            the output stream
     * @param name
     *            the name of the file
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        out.print("</table>");
        out.println("</body>");
        out.println("</html>");

    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param file
     *            the file name
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(String file, Map<String, Integer> s) {
        SimpleReader input = new SimpleReader1L(file);
        Set<Character> set = new Set1L<Character>();
        set.add(' ');
        set.add('\'');
        set.add(',');
        set.add('.');
        set.add(';');
        set.add('#');
        set.add('/');
        set.add('(');
        set.add(')');
        set.add('-');

        int position;

        while (!input.atEOS()) {
            String line = input.nextLine();
            position = 0;

            while (position < line.length()) {
                String word = nextWordOrSeparator(line, position, set);
                if (!set.contains(word.charAt(0))) {
                    if (!s.hasKey(word)) {
                        s.add(word, 1);
                    } else {
                        int orginalVal = s.value(word);
                        orginalVal++;
                        s.replaceValue(word, orginalVal);
                    }
                }

                position += word.length();
            }
        }

        input.close();

    }

    /**
     *
     * @param text
     * @param position
     * @param separators
     * @return
     */
    private static String nextWordOrSeparator(String text, int position,
            Set<Character> separators) {
        assert text != null : "Violation of: text is not null";
        assert separators != null : "Violation of: separators is not null";
        assert 0 <= position : "Violation of: 0 <= position";
        assert position < text.length() : "Violation of: position < |text|";

        String remove = text.substring(position);
        char positionchar = remove.charAt(0);
        String tester = "";
        boolean isWord = !separators.contains(positionchar);
        boolean check = true;
        int i = 0;

        while (position + i < text.length() && check) {
            if (separators.contains(remove.charAt(i))) {
                if (!isWord) {
                    tester += remove.charAt(i);
                } else {
                    check = false;
                }
            } else {
                if (isWord) {
                    tester += remove.charAt(i);
                } else {
                    check = false;
                }
            }
            i++;
        }

        return tester;
    }

    /**
     *
     * @param out
     * @param m
     */
    private static void printToFile(SimpleWriter out, Map<String, Integer> m) {
        for (int i = 0; i < m.size(); i++) {
            Map.Pair<String, Integer> p = m.removeAny();
            out.println("<tr>");
            out.println("<td>" + p.key() + "</td>");
            out.println("<td>" + p.value() + "</td>");
            out.println("</tr>");
        }
    }

    /**
     *
     * @param out
     * @param m
     */
    private static Set1L alphabetize(Map<String, Integer> m) {
        return null;

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments
     */
    public static void main(String[] args) {
        SimpleReader input = new SimpleReader1L();
        SimpleWriter output = new SimpleWriter1L();

        final String separatorStr = " \t, ";
        Set<Character> separatorSet = new Set1L<>();
        generateElements(separatorStr, separatorSet);

        Map<String, Integer> wordMap = new Map1L<>();

        output.print("Please enter a valid text file: ");
        String file = input.nextLine();
        SimpleWriter writer = new SimpleWriter1L(file + ".html");

        outputHeader(writer, file);

        output.print("header complete");

        processItem(file, wordMap);
        output.print("processItem Compelte");

        printToFile(writer, wordMap);
        output.print("print to file complete");

        outputFooter(writer);
        output.print("footer complete");

        input.close();
        output.close();
    }

}
